cmake_minimum_required(VERSION 3.1)
project(DDP-SQP-ADMM)
SET (CMAKE_CXX_COMPILER "/usr/bin/g++")


if(NOT CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif()
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

option(DDP_SYSTEM_EIGEN "Use system-installed version of Eigen" OFF)
option(DDP_BUILD_EXAMPLES "Build examples" ON)

set(EIGEN_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/eigen)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if(DDP_SYSTEM_EIGEN)
    find_package(Eigen)
    if(EIGEN_FOUND)
        message(STATUS "Eigen found: ${EIGEN_INCLUDE_DIR}")
    else()
        message(FATAL_ERROR "Eigen NOT found!")
    endif()
endif()


find_package(OROCOS_KDL)
if (OROCOS_KDL)
endif()




# set(OROCOS_KDL_INCLUDE_DIR ${OROCOS_KDL_INCLUDE_DIR})

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_FLAGS "-Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
set(CMAKE_CXX_FLAGS "-march=native -mtune=native -mavx2 -mfma")
set(CMAKE_CXX_FLAGS "-std=c++11")


include_directories(SYSTEM ${EIGEN_INCLUDE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${OROCOS_KDL_INCLUDE_DIR} /usr/local/include)

message(STATUS ${OROCOS_KDL_INCLUDE_DIR})

add_library(kuka-models)
target_include_directories(kuka-models PUBLIC include)
set(SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/KukaModel.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/models.cc)
target_sources(kuka-models PUBLIC ${SOURCES})

add_library(ddp-solver)
target_include_directories(ddp-solver PUBLIC include)
set(SOURCES_DDP ${CMAKE_CURRENT_SOURCE_DIR}/src/ilqrsolver.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/kuka_arm.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/ddp.cpp)
target_link_libraries(ddp-solver PUBLIC kuka-models)
target_sources(ddp-solver PUBLIC ${SOURCES_DDP})

add_library(ddp-admm-solver)
target_include_directories(ddp-admm-solver PUBLIC include ${CMAKE_CURRENT_SOURCE_DIR}/ModernRobotics/include/)
set(SOURCES_DDP_ADMM ${CMAKE_CURRENT_SOURCE_DIR}/src/ilqrsolver_admm.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/kuka_arm.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/admm.cpp)
target_link_libraries(ddp-admm-solver PUBLIC kuka-models)
target_sources(ddp-admm-solver PUBLIC ${SOURCES_DDP_ADMM})

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")


add_library(ModernRoboticsCpp STATIC ../ModernRobotics/src/modern_robotics.cpp)
target_include_directories(ModernRoboticsCpp PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/ModernRobotics/include/)

install (TARGETS ModernRoboticsCpp
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin)

add_library(ik-solvers STATIC ./src/ik_solver.cpp ./include/ik_solver.hpp ./include/ik_trajectory.hpp)
target_include_directories(ik-solvers PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/ModernRobotics/include/)
target_link_libraries(ik-solvers ModernRoboticsCpp)


#######################################################################################




add_executable(ddp-admm-contact src/admm_main.cpp)
target_include_directories(ddp-admm-contact PUBLIC  ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(ddp-admm-contact orocos-kdl ddp-admm-solver kuka-models ModernRoboticsCpp ik-solvers)


add_executable(ddp-optim src/ddp_main.cpp)
target_include_directories(ddp-optim PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(ddp-optim orocos-kdl ddp-solver kuka-models)


add_executable(mpc-optim src/mpc_main.cpp)
target_include_directories(mpc-optim PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(mpc-optim orocos-kdl ddp-solver kuka-models)

add_executable(ik-test src/ik_test.cpp)
target_include_directories(ik-test PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/ModernRobotics/include/ ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(ik-test ModernRoboticsCpp ik-solvers)


# test scripts
add_executable(test_cases src/test.cpp)
target_include_directories(test_cases PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(test_cases ModernRoboticsCpp ik-solvers orocos-kdl kuka-models ddp-solver)


#add_executable(l ${LIB_TEST_SOURCES})
#target_link_libraries(lib_test ModernRoboticsCpp)
